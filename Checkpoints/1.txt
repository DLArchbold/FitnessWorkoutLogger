//https://www.codeguru.com/csharp/.net/net_data/using-sqlite-in-a-c-application.html
using System;
using System.Collections.Generic;
using System.Data.SQLite;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace SQLiteDemo
{
    class Program
    {

        static void Main(string[] args)
        {

            string FirstPrompt = "Add workout log to: \n1) Strengh Workout\n2) Cardio Workout\n3) Balance Workout\n4) Favourites/Recent ";
            //Console.WriteLine(FirstPrompt);



            int Choice1 = 0;

            int Choice2;

            while (Choice1 == 0)
            {
                Console.WriteLine(FirstPrompt);
                Choice1 = ReadInt32(Console.ReadLine());
              

                switch (Choice1)
                {
                    case 1:
                        Console.WriteLine("1) Bodyweight Exercises\n2) Equipment Exercises");
                        Choice2 = ReadInt32(Console.ReadLine());
                        break;
                    case 2:
                        Console.WriteLine("1) Indoor\n2) Outdoor\n3)Other");
                        Choice2 = ReadInt32(Console.ReadLine());
                        break;
                    case 3:
                        Console.WriteLine("1) Standing on one foot\n2) Heel-to-toe walk");
                        Choice2 = ReadInt32(Console.ReadLine());
                        break;
                    case 4:
                        break;
                    default:
                        Choice1 = 0;
                        break;



                }
            Console.WriteLine(Choice1);


            }








            SQLiteConnection sqlite_conn_strength;
            //sqlite_conn_strength = CreateConnectionStrength();
            sqlite_conn_strength = new SQLiteConnection("Data Source=StrengthDB.db; Version = 3; New = True; Compress = True; ");
            sqlite_conn_strength.Open();
            CreateTable(sqlite_conn_strength);
            InsertData(sqlite_conn_strength);
            ReadData(sqlite_conn_strength);

            SQLiteConnection sqlite_conn_cardio;
            //sqlite_conn_cardio = CreateConnectionCardio();
            sqlite_conn_cardio = new SQLiteConnection("Data Source=CardioDB.db; Version = 3; New = True; Compress = True; ");
            sqlite_conn_cardio.Open();
            CreateTable(sqlite_conn_cardio);
            InsertData(sqlite_conn_cardio);
            ReadData(sqlite_conn_cardio);
        }

        static SQLiteConnection CreateConnectionStrength()
        {

            SQLiteConnection sqlite_conn_strength;
            // Create a new database connection:
            sqlite_conn_strength = new SQLiteConnection("Data Source=StrengthDB.db; Version = 3; New = True; Compress = True; ");
            sqlite_conn_strength.Open();
            return sqlite_conn_strength;
            // Open the connection:

       
           // try
           // {
           //     sqlite_conn_strength.Open();
           // }
           // catch (Exception ex)
           // {

           // }
           // return sqlite_conn_strength;

           //try
           // {
           //     sqlite_conn_cardio.Open();
           // }
           // catch (Exception ex)
            //{

            //}
            //return sqlite_conn_cardio;
        }

        static SQLiteConnection CreateConnectionCardio()
        {
            SQLiteConnection sqlite_conn_cardio;
            sqlite_conn_cardio = new SQLiteConnection("Data Source=CardioDB.db; Version = 3; New = True; Compress = True;");
            sqlite_conn_cardio.Open();
            return sqlite_conn_cardio;
        }

        static void CreateTable(SQLiteConnection AnyConnectionObject)
        {


            //string Createsql1 = "CREATE TABLE if not exists SampleTable1(Col1 VARCHAR(20), Col2 INT)";
            string Createsql = "CREATE TABLE if not exists SampleTable(Col1 VARCHAR(20), Col2 INT)";
            SQLiteCommand sqlite_cmd = new SQLiteCommand(Createsql, AnyConnectionObject);
            sqlite_cmd.ExecuteNonQuery();
            //sqlite_cmd = new SQLiteCommand(Createsql, sqlite_conn_cardio);

            //Drop tables if created before
            //string Deletesql = "DROP TABLE SampleTable";
            //string Deletesql1 = "DROP TABLE SampleTable1";

            //*this one sqlite_cmd = conn.CreateCommand();

            //sqlite_cmd.CommandText = Deletesql;
            //sqlite_cmd.ExecuteNonQuery();
            //sqlite_cmd.CommandText = Deletesql1;
            //sqlite_cmd.ExecuteNonQuery();


            //sqlite_cmd = conn.CreateCommand();

            //sqlite_cmd.CommandText = Createsql;

            // sqlite_cmd.CommandText = Createsql1;

            string Createsql1 = "CREATE TABLE if not exists SampleTable1(Col1 VARCHAR(20), Col2 INT)";
            sqlite_cmd = new SQLiteCommand(Createsql1, AnyConnectionObject);
            sqlite_cmd.ExecuteNonQuery();

        }

        public static int ReadInt32(string value)
        {
            int val = -1;
            if (!int.TryParse(value, out val))
                return -1;
            return val;
        }






        static void InsertData(SQLiteConnection AnyConnectionObject)
        {

            //int rc;
            //sqlite3* db;
            //sqlite3_stmt* stmt = null;

            string egtext = "Example text";
            Console.Write("Enter value for egtext:");
            egtext = Console.ReadLine();
            int a = 1;
            Console.Write("Enter value for a: ");
           
            a = ReadInt32(Console.ReadLine());
            //Console.Write(a);
            SQLiteCommand sqlite_cmd;
            SQLiteCommand VarQuery;
            VarQuery = AnyConnectionObject.CreateCommand();

            
            //VarQuery.Parameters.Add(new SQLiteParameter("@param2", a));
            //string abc = "INSERT INTO USER (Col1) values (@param1)";
            //VarQuery.Parameters.AddWithValue("@param1", egtext);
            //VarQuery.ExecuteNonQuery();
            VarQuery.CommandText = "INSERT INTO SampleTable (Col1, Col2) VALUES(@param1, @param2)";
            VarQuery.CommandType = System.Data.CommandType.Text;
            VarQuery.Parameters.Add(new SQLiteParameter("@param1", egtext));
            VarQuery.Parameters.Add(new SQLiteParameter("@param2",a));
            VarQuery.ExecuteNonQuery();



           // sqlite_cmd = conn.CreateCommand();
           // sqlite_cmd.CommandText = "INSERT INTO SampleTable (Col1, Col2) VALUES('Test Text ', 1)"; 
           //sqlite_cmd.ExecuteNonQuery();
           // sqlite_cmd.CommandText = "INSERT INTO SampleTable(Col1, Col2) VALUES('Test1 Text1 ', 2); ";
           //sqlite_cmd.ExecuteNonQuery();
           // sqlite_cmd.CommandText = "INSERT INTO SampleTable (Col1, Col2) VALUES('Test2 Text2 ', 3); ";
           //sqlite_cmd.ExecuteNonQuery();
           // sqlite_cmd.CommandText = "INSERT INTO SampleTable (Col1, Col2) VALUES('Not a stupid value ', 4); ";
           // sqlite_cmd.ExecuteNonQuery();


           // sqlite_cmd.CommandText = "INSERT INTO SampleTable1(Col1, Col2) VALUES('Test3 Text3 ', 3); ";
           //sqlite_cmd.ExecuteNonQuery();

        }

        static void ReadData(SQLiteConnection AnyConnectionObject)
        {
            SQLiteDataReader sqlite_datareader;
            SQLiteCommand sqlite_cmd;
            sqlite_cmd = AnyConnectionObject.CreateCommand();
            sqlite_cmd.CommandText = "SELECT * FROM SampleTable";

            sqlite_datareader = sqlite_cmd.ExecuteReader();
            //string abc = "this is abc";
            while (sqlite_datareader.Read())
            {
                //Display values from column 0 (the text)
                Console.Write("Text: ");
                   string myreader = sqlite_datareader.GetString(0);
                Console.WriteLine(myreader);
                //Display values from column 1 (the numbers)
                Console.Write("Number:");
                int mynumber = sqlite_datareader.GetInt32(1);
                Console.WriteLine(mynumber);
               
            }

            AnyConnectionObject.Close();
            Console.ReadKey();
        }

    }
}